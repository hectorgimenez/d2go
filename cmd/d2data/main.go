package main

import (
	"encoding/json"
	"io"
	"log"
	"os"
	"text/template"
)

const templateStr = `// Code generated by d2data. DO NOT EDIT.
// source: cmd/d2data/d2data/skilldesc.json
package skill

var Desc = map[Skill]Description{
{{- range $key, $value := . }}
    {{ $key }}: {Name: "{{ $value.Skilldesc }}", Page: {{ $value.SkillPage }}, Row: {{ $value.SkillRow }}, Column: {{ $value.SkillColumn }}, ListRow: {{ $value.ListRow }}, IconCel: {{ $value.IconCel }} },
{{- end }}
}`

type SkillDesc struct {
	Skilldesc   string `json:"skilldesc"`
	SkillPage   int    `json:"SkillPage"`
	SkillRow    int    `json:"SkillRow"`
	SkillColumn int    `json:"SkillColumn"`
	ListRow     int    `json:"ListRow"`
	IconCel     int    `json:"IconCel"`
	StrName     string `json:"str name"`
	StrShort    string `json:"str short"`
	StrLong     string `json:"str long"`
	StrAlt      string `json:"str alt"`
}

// Generate static code from https://github.com/blizzhackers/d2data data files.
func main() {
	jsonFile, err := os.Open("cmd/d2data/d2data/skilldesc.json")
	if err != nil {
		log.Fatal(err)
	}
	defer jsonFile.Close()

	byteValue, _ := io.ReadAll(jsonFile)

	var skillsMap map[string]SkillDesc
	err = json.Unmarshal(byteValue, &skillsMap)
	if err != nil {
		log.Fatal(err)
	}

	t := template.Must(template.New("skilldesc").Parse(templateStr))

	file, err := os.Create("pkg/data/skill/skilldesc.go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	err = t.Execute(file, skillsMap)
	if err != nil {
		log.Fatal(err)
	}
}
